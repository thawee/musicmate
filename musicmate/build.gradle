import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

/*
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
   // id("com.android.application")
    alias libs.plugins.android.application
    //id("kotlin-android")
   // id("kotlin-kapt")
    alias libs.plugins.kotlin.android
    alias libs.plugins.kotlin.kapt
    alias libs.plugins.devtools.ksp
   // id("com.mikepenz.aboutlibraries.plugin")
   // alias libs.plugins.android.aboutlibraries
}

android {
   // compileSdkVersion versions.compileSdk
    compileSdk = libs.versions.compileSdkVersion.get() as Integer
    buildToolsVersion = libs.versions.buildTools.get()
    //buildTools( libs.versions.buildTools.get())

    defaultConfig {
        applicationId = "apincer.android.mmate"
        //minSdkVersion versions.minSdk
        minSdk = libs.versions.minSdkVersion.get() as Integer
        //targetSdkVersion versions.targetSdk
        targetSdk = libs.versions.targetSdkVersion.get() as Integer
        versionCode = 95
        versionName  = "3.9.5-"+ getDate()
        //noinspection ChromeOsAbiSupport
        ndk.abiFilters = ['arm64-v8a']
        multiDexEnabled = true
		//renderscriptTargetApi versions.renderscriptTargetApi
		//renderscriptSupportModeEnabled = true
        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        // jetty12 required java 17
        sourceCompatibility = JavaLanguageVersion.of(17)
        targetCompatibility = JavaLanguageVersion.of(17)
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    tasks.withType(KotlinCompile).configureEach {
        compilerOptions {
            jvmTarget.set(JvmTarget.JVM_17)
        }
    }

    buildTypes {
        release {
            minifyEnabled = true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding = false
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/library_release.kotlin_module', 'META-INF/library-core_release.kotlin_module', 'META-INF/LICENSE.md', 'META-INF/NOTICE.md', 'META-INF/AL2.0', 'META-INF/LGPL2.1','META-INF/INDEX.LIST','META-INF/io.netty.versions.properties']
            pickFirsts += ['META-INF/DEPENDENCIES']
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    lint {
        abortOnError = true
    }

    namespace = 'apincer.android.mmate'
}
kapt {
    // required by epoxy
    correctErrorTypes = true
}

dependencies {
    // AndroidX
    implementation libs.androidx.annotation
    implementation libs.androidx.core
    implementation libs.androidx.activity
    implementation libs.androidx.recyclerView
    implementation libs.androidx.recyclerView.selection
    implementation libs.androidx.coordinatorlayout
    implementation libs.androidx.appCompat
    implementation libs.androidx.fragment
    implementation libs.androidx.cardView
    implementation libs.androidx.annotation
    implementation libs.androidx.lifecycle.runtime
    implementation libs.androidx.lifecycle.process
    implementation libs.androidx.palette
    implementation libs.androidx.preference
    implementation libs.androidx.documentFile
    implementation libs.androidx.work
    implementation libs.androidx.drawerlayout
    implementation libs.androidx.loader
    implementation libs.androidx.localbroadcastmanager
    implementation libs.androidx.drawerlayout
    implementation libs.androidx.viewpager2

    // OrmLite
    implementation libs.ormlite.android

    // google
    implementation libs.google.material
    implementation libs.google.gson
    implementation libs.google.guava

    // UI Libs
    implementation libs.skydoves.powerspinner
    implementation libs.skydoves.powermenu
    implementation libs.skydoves.progressview
    implementation libs.skydoves.androidribbon
    implementation libs.skydoves.elasticviews
    implementation libs.iwgang.simplifyspan
    implementation libs.zhanghai.fastscroll
    implementation libs.medyo.stateviews
    implementation libs.chrisbanes.photoview
    implementation libs.philjay.mpandroidchart
    implementation libs.vanniktech.textbuilder
    implementation libs.sparrow007.carouselrecyclerview
    implementation libs.refresh.layout.kernel
    implementation libs.refresh.header.classics
    //implementation libs.mikepenz.aboutlibraries
    implementation libs.tutorialsandroid.filepicker

    //others
    implementation libs.greenrobot.eventbus
    implementation libs.anggrayudi.storage
    implementation libs.ffmpegkit.audio
    //implementation deps.coverartarchive

    implementation libs.commons.codec
    implementation libs.commons.io
    implementation libs.commons.logging
    implementation libs.commons.lang3
    implementation libs.commons.text
    implementation libs.commons.match3
    implementation libs.icm.jlargearrays

    implementation libs.jackson.core
    implementation libs.jackson.databind
    implementation libs.jetbrains.annotations
    implementation libs.slf4j.api
    implementation libs.jupnp.android
    implementation libs.jupnp.support
    implementation libs.jetty.server12
    implementation libs.jetty.client12

    // Glide
    implementation libs.glide.runtime
    kapt libs.glide.compiler
    //ksp libs.glide.compiler

    // Local Library
    implementation project(':library:justdsd')
   // implementation project(':library:JustFLAC')
    implementation project(':library:library')
    implementation project(':library:androidtagview')
    implementation project(':library:jaudiotagger-android')
    debugImplementation project(':library:crashreporter')
   // implementation project(':library:MaterialEditText')
    implementation project(':library:mqaidentifier')
   // implementation project(':library:coroutines')
   // implementation project(':library:objectrelations')
   // implementation project(':library:esoco-common')
   // implementation project(':library:esoco-monads')
}

configurations.implementation {
    exclude group: 'com.hazelcast', module: 'hazelcast'
   // exclude group: 'org.slf4j', module: 'slf4j-api'
   // exclude group: 'com.github.bumptech.glide', module: 'glide'
   // exclude group: 'io.coil-kt', module: 'coil-base'
   // exclude group: 'com.google.code.gson', module: 'gson'
}

/*
aboutLibraries {
    // define the path configuration files are located in. E.g. additional libraries, licenses to add to the target .json
    configPath = "buildsystem"
    //excludeFields = ["licenses","funding"]

    // Enable the duplication mode, allows to merge, or link dependencies which relate
    duplicationMode = DuplicateMode.LINK
    // Configure the duplication rule, to match "duplicates" with
    duplicationRule = DuplicateRule.SIMPLE

    exclusionPatterns = [
            ~"org.jetbrains.*",
            ~"androidx.*",
            ~"androidx.activity*",
            ~"androidx.databinding*",
            ~"androidx.emoji2:emoji2-*",
            ~"androidx.lifecycle:lifecycle-*",
            ~"androidx.room*",
            ~"androidx.sqlite:sqlite*",
            ~"javax.validation:validation-api",
            ~"com.google.guava.*",
            ~"com.google.errorprone.*",
            ~"com.google.j2objc.*",
            ~"org.checkerframework.*",
            ~"org.greenrobot.*",
            ~"com.google.code.findbugs:jsr305",
            ~"com.fasterxml.jackson.*",
            ~"org.slf4j:slf4j-api",
            ~"org.jsoup:jsoup",
            ~"commons-io:commons-io",
            ~"commons-logging:commons-logging",
            ~"commons-codec:commons-codec",
           // ~"org.apache.*",
            ~"io.coil-kt:coil-base",
            ~"com.airbnb.android:epoxy-annotations",
            ~"io.objectbox:objectbox-kotlin",
            ~"io.objectbox:objectbox-java",
            ~"io.objectbox:objectbox-java-api",
            ~"com.mikepenz:aboutlibraries-core-android",
            ~"com.squareup.retrofit2:retrofit-mock",
            ~"org.reactivestreams:reactive-streams",
            ~"com.mikepenz:fastadapter",
            ~"com.squareup.okio:okio-jvm",
            ~"com.arthenica:smart-exception-common",
            ~"com.arthenica:smart-exception-java",
            ~"com.squareup.retrofit2:converter-gson",
            ~"io.github.scwang90:refresh-header-classics",
            ~"io.github.scwang90:refresh-footer-classics",
            ~"io.github.scwang90:refresh-drawable-paint",
            ~"com.afollestad.*",
            ~"com.github.bumptech.glide:annotations",
            ~"com.github.bumptech.glide:disklrucache",
            ~"com.github.bumptech.glide:gifdecoder",
            ~"com.arthenica:*",
            ~"io.netty:netty-buffer",
            ~"io.netty:netty-codec",
            ~"io.netty:netty-common",
            ~"io.netty:netty-handler",
            ~"io.netty:netty-resolver",
            ~"io.netty:netty-transport",
            ~"io.netty:netty-transport-native-unix-common",
            ~"org.jupnp:org.jupnp.support",
            ~"com.halfhp.fig:*",
            ~"com.facebook.shimmer:shimmer",
            ~"org.jupnp:org.jupnp",
            ~"com.github.wendykierp:JTransforms",
            ~"org.eclipse.jetty:jetty-alpn-client",
            ~"org.eclipse.jetty:jetty-io",
            ~"org.eclipse.jetty:jetty-http",
            ~"org.eclipse.jetty:jetty-util",
            ~"org.eclipse.jetty.compression:jetty-compression-common",
            ~"org.eclipse.jetty.compression:jetty-compression-gzip",
            ~"com.squareup.okhttp3:okhttp",
            ~"pl.edu.icm:JLargeArrays",
            ~"org.apache.commons:commons-math3"
    ]
}
 */

static def getDate() {
    def date = new Date()
    return date.format('yyMMdd')
}